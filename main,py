import os 
import dotenv
dotenv.load_dotenv()
from langchain_core.prompts import PromptTemplate
from langchain_google_genai import GoogleGenerativeAIEmbeddings, ChatGoogleGenerativeAI
from langchain_community.document_loaders import PyPDFLoader
from langchain_text_splitters import CharacterTextSplitter
from langchain_community.vectorstores import FAISS
from langchain import hub
from langchain.chains.combine_documents import create_stuff_documents_chain
from langchain.chains.retrieval import create_retrieval_chain

if __name__ == "__main__":
    path = "react-agents.pdf"
    print(path)
    loader = PyPDFLoader(file_path=path)
    documents = loader.load()

    text_splitter = CharacterTextSplitter("\n", chunk_size = 1000, chunk_overlap = 40)
    docs = text_splitter.split_documents(documents=documents)


    embeddings = GoogleGenerativeAIEmbeddings(model="models/text-embedding-004")
    llm = ChatGoogleGenerativeAI(temperature= 0, model="gemini-2.0-flash")

    vector_store = FAISS.from_documents(docs, embedding=embeddings)
    vector_store.save_local("react_local") #Way to save locallu
    
    new_vectorstore = FAISS.load_local("react_local", embeddings, allow_dangerous_deserialization=True)
    
    retrieval_qa_chat_prompt = hub.pull("langchain-ai/retrieval-qa-chat")
    combine_docs_chain = create_stuff_documents_chain(llm, retrieval_qa_chat_prompt)
    retrieval_chain = create_retrieval_chain(retriever=new_vectorstore.as_retriever(), combine_docs_chain = combine_docs_chain)

    query = "Give me the gist of ReAct in 3 sentences."
    result = retrieval_chain.invoke(input={"input": query})
    print(result["answer"])